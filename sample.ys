 # Execution begins at address 0
.pos 0
init:  irmovq Stack, %esp       # Set up stack pointer
irmovq Stack, %ebp       # Set up base pointer
calq Main                # Execute main program
halt                     # Terminate program
# Array of 4 elements
.align 4
array: .long 0xd
.long 0xc0
.long 0xb00
.long 0xa000
Main:  pushq %ebp
rrmovq %esp,%ebp
irmovq $4,%eax
pushq %eax               # Push 4
irmovq array,%edx
pushq %edx               # Push array
calq Sum                 # Sum(array, 4)
rrmovq %ebp,%esp
popq %ebp
ret
#/* $begin sum-ys 0 */
# int Sum(int *Start, int Count)
Sum:   pushq %ebp
rrmovq %esp,%ebp
mrmovq 8(%ebp),%ecx      # ecx = Start
mrmovq 12(%ebp),%edx     # edx = Count
xorq %eax,%eax           # sum = 0
andq %edx,%edx           # Set condition codes
je End
Loop:  mrmovq (%ecx),%esi       # get *Start
addq %esi,%eax           # add to sum
irmovq $4,%ebx
addq %ebx,%ecx           # Start++
irmovq $-1,%ebx
addq %ebx,%edx           # Count--
jne Loop                 # Stop when 0
End:   rrmovq %ebp,%esp
popq %ebp
ret
#/* $end sum-ys 0 */
# The stack starts here and grows to lower addresses
.pos 0x100
Stack:
